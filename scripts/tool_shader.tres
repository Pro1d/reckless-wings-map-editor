[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.3.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_never,depth_test_disable,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform float outter_ring_radius : hint_range(1, 50.0);
uniform bool billboard = false;
uniform int shape_mode : hint_range(0, 2) = 0; // 0: circle, 1: 4-way arrows, 2: rotation arrow
const float mesh_radius = 51.0;
const float inner_ring_radius = 5.0;
const float arrow_radius = 20.0;
const float half_thickness = 0.4;
const float aliasing = 0.3;
const float SQRT_2 = 1.41421356;

void vertex() {
	UV = (UV - vec2(.5,.5)) * 2.0 * mesh_radius;
	if (billboard)
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}

void fragment() {
	vec2 uv = UV;
	float shape_alpha = 0.0;
	vec2 auv = abs(uv);
	float l0 = min(auv.x, auv.y);
	float l1 = auv.x + auv.y;
	float l2 = length(auv);
	float linf = max(auv.x, auv.y);
	
	float inner_ring = smoothstep(aliasing, 0.0, abs(l2 - inner_ring_radius) - half_thickness);
	if (shape_mode == 0) { // circle
		float outter_ring = smoothstep(aliasing, 0.0, abs(l2 - outter_ring_radius) - half_thickness);
		//float middle_cross = smoothstep(aliasing, 0.0, l0 - half_thickness);
		//float middle_square = smoothstep(aliasing, 0.0, linf - 3.0);
		shape_alpha = max(outter_ring, inner_ring);//min(middle_cross, middle_square));
	}
	else if (shape_mode == 1) { // 4-way arrows
		float curved_square = l1 + (arrow_radius - linf) * 0.25;
		float contour = smoothstep(aliasing * 1.41, 0.0, abs(curved_square - arrow_radius) - half_thickness);
		float dist_axis = max(0.0, l0 - arrow_radius * 0.25);
		float corner_mask = smoothstep(aliasing, 0.0, dist_axis);
		shape_alpha = max(min(corner_mask, contour), inner_ring);
	}
	else if (shape_mode == 2) { // rotation arrow
		float outter_ring = smoothstep(aliasing, 0.0, abs(l2 - arrow_radius) - half_thickness);
		float mask = smoothstep(aliasing, 0.0, max(0.0, auv.y - auv.x));
		vec2 sym = auv - vec2(arrow_radius / SQRT_2);
		float dsym = min(0, dot(sym, vec2(SQRT_2 * .5)));
		sym -= vec2(SQRT_2 * .5) * 2.0 * dsym;
		float arrow = smoothstep(aliasing, 0.0, abs(sym.y + sym.x * 0.1) - half_thickness);
		float arrow_mask = smoothstep(aliasing, 0.0, max(0.0, sym.x - arrow_radius * 0.25));
		float rotating_arrow = max(min(outter_ring, mask), min(arrow, arrow_mask));
		shape_alpha = max(rotating_arrow, inner_ring);
	}
	float depth_tex = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth_tex * 2.0 - 1.0, 1.0);
	float depth_blend = clamp((VERTEX.z - world_pos.z / world_pos.w) * .5 + .5, 0.0, 1.0);
	ALBEDO = albedo.rgb * depth_blend;
	ALPHA = albedo.a * shape_alpha;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 0.580392 )
shader_param/outter_ring_radius = 30.0
shader_param/billboard = false
shader_param/shape_mode = 0
